name: Action CI

on:
  workflow_call:

jobs:

  ci:
    name: CI
    runs-on: ubuntu-latest
    outputs:
      latest_local_sha: ${{ steps.output-sha.outputs.latest_local_sha }}
      has_auto_tag: ${{ steps.output-has-auto-tag.outputs.has_auto_tag }}
      branch: ${{ steps.output-branch.outputs.branch }}
    steps:

      - name: Checkout code
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2

      - name: Install PHP
        uses: shivammathur/setup-php@1a18b2267f80291a81ca1d33e7c851fe09e7dfc4 # v2.22.0
        with:
          php-version: 8.1
          extensions: yaml
          tools: composer:v2

      - name: Run CI
        run: |
          if [[ -f composer.json ]]; then
            composer install --prefer-dist --no-progress --no-suggest --no-interaction --no-scripts --no-plugins
          fi
          if [[ -f phpunit.xml ]] || [[ -f phpunit.xml.dist ]]; then
            if [[ -f vendor/bin/phpunit ]]; then
              vendor/bin/phpunit
            else
              wget https://phar.phpunit.de/phpunit-9.6.phar
              php phpunit-9.6.phar --verbose --colors=always
            fi
          else
            echo "No phpunit tests found"
          fi
      
      - name: Output latest SHA
        id: output-sha
        run: |
          LATEST_LOCAL_SHA=$(git rev-parse HEAD)
          echo "LATEST_LOCAL_SHA is $LATEST_LOCAL_SHA"
          echo "latest_local_sha=$LATEST_LOCAL_SHA" >> $GITHUB_OUTPUT

      - name: Output has auto-tag
        id: output-has-auto-tag
        run: |
          HAS_AUTO_TAG=0
          if [[ -f .github/workflows/auto-tag.yml ]]; then
            HAS_AUTO_TAG=1
          fi
          echo "HAS_AUTO_TAG is $HAS_AUTO_TAG"
          echo "has_auto_tag=$HAS_AUTO_TAG" >> $GITHUB_OUTPUT

      - name: Output branch
        id: output-branch
        run: |
          BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "BRANCH is $BRANCH"
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

  gaugerelease:
    name: Check unreleased changes
    runs-on: ubuntu-latest
    needs: ci
    if: ${{ github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    outputs:
      do_release: ${{ steps.gauge-release.outputs.do_release }}
      next_tag: ${{ steps.gauge-release.outputs.next_tag }}
    steps:
      - name: Gauge release
        id: gauge-release
        uses: silverstripe/gha-gauge-release@v1
        with:
          latest_local_sha: ${{ needs.ci.outputs.latest_local_sha }}

  patchrelease:
    name: Patch release
    runs-on: ubuntu-latest
    needs: gaugerelease
    if: ${{ needs.gaugerelease.outputs.do_release == '1' }}
    steps:
      - name: Patch release
        uses: silverstripe/gha-tag-release@v1
        with:
          tag: ${{ needs.gaugerelease.outputs.next_tag }}
          delete_existing: false
          release: true
          release_auto_notes: true

  # Trigger gha-auto-tag manually as any workflow triggered by the GitHub API will NOT trigger any new
  # workflows e.g. auto-tag.yml as a measure to protect against infinite loops
  # https://github.com/peter-evans/create-pull-request/issues/48#issuecomment-537478081
  dispatchautotag:
    name: Dispatch auto tag
    runs-on: ubuntu-latest
    needs: [ci, patchrelease]
    if: ${{ needs.ci.outputs.has_auto_tag == '1' }}
    env:
      GITHUB_REPOSITORY: ${{ github.repository }}
      BRANCH: ${{ needs.ci.outputs.branch }}
    steps:
      - name: Dispatch auto tag
        run: |
          # https://docs.github.com/en/rest/actions/workflows?apiVersion=2022-11-28#create-a-workflow-dispatch-event
          RESP_CODE=$(curl -w %{http_code} -s -L -o __response.json \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ github.token }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/$GITHUB_REPOSITORY/actions/workflows/auto-tag.yml/dispatches \
            -d "{\"ref\":\"$BRANCH\"}"
          )
          if [[ $RESP_CODE != "204" ]]; then
            echo "Failed to dispatch workflow - HTTP response code was $RESP_CODE"
            cat __response.json
            exit 1
          fi

      - name: Delete temporary files
        shell: bash
        if: always()
        run: |
          if [[ -f __response.json ]]; then
            rm __response.json
          fi
